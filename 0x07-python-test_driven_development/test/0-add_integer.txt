# 0-add_integer.txt

===========================
How to Use 0-add_integer.py
===========================

This module defines an integer addition function ``add_integer(a, b=98)``.
#where a is an integer greater than 0
Usage
=====

``add_integer(...)``` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(7, 9)
    16

::

    >>> add_integer(7, -9)
    -2

The function also works with floating-point values.

::

    >>> add_integer(10.0, 11.0)
    21.0

# floats are casted to integer before addition is done.

::

    >>> add_integer(4.0, 5.0)
    
9.0
::

    >>> add_integer(-2.0, -0.2)
    0

#combining floating and non floating point values.

::

    >>> add_integer(6.3, -5.3)
    -1

The second argument is optional - by default, it is 98.

::

    >>> add_integer(2)
    100

Non-integers
===========

``add_integer()``both arguments are either integers or floats.
 TypeError is raised If argument is a non-integer and non-float:

::

    >>> add_integer("hello", 1)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(34, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer()
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(9.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.

::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(3, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer


++++++++++++++++++++++++++++++++++


